Forward
=======


PyGTAPAgg was motivated by the unprecedented growth in analytical tools which have accompanied the field of data sciences in the past ten years.  In many ways, data sciences grew out of domains, such as economics and life sciences, but has come to encompass broader methods and data (for example, web traffic and social networks).  This is evident in the development of Python, where the most popular data manipulation package, Pandas, grew from the needs of domains such as economists, but is now driven by an even larger numbers of users from fields outside economics.  Just as important to CGE modelers, Python has benefited from the efforts in the development of highly efficient APIs for manipulating arrays, matrices and systems of equations such as NumPy.  Accessing lower-level programming languages, such as C, C++ and Fortran has always been accompanied with steep learning curves and long development lead times. Python procedures access these languages through APIs, which greatly reduce the learning curve and speeds the development cycle.  This can be seen clearly in the implementation of the PyQt software, used to create the GUI in PyGTAPAgg, which is tightly linked to the core Qt procedures written in C and C++.   The HARPY API provides access to GEMPACK HAR files via NumPy.
   
Linking Python with access to widely used CGE databases opens the potential for data analysis and development. Plotly provides a robust set of graphing and visualization tools.   The avenue of progress seemed clear, the aggregation of the GTAP database and supporting analytics is a springboard to greater ideas.  PyGTAPAgg is inspired by the long and steadfast service provided by the legacy programs GTAPAgg and its successor GTAPagg2.   These programs still provide simple, reliable means for aggregating the GTAP database.  The goal and inspiration of the current project is to replicate the consistent and reliable performance of those programs before jumping off to greater endeavors and what we hope will be a renaissance in software development related to the GTAP database, supported by community (open source) development.
 
While most GTAP applications focus on a particular analysis, model, or an area of data construction, it is expected that the distribution of PyGTAPAgg will support users across disciplines and enhance analysis for current users. It will also improve productivity, by bringing resources previously spread across documents and software into one place. The incorporation of analytics will further reduce cycle times of creating data and running models to refine aggregations. The use of a powerful, widely used, open-source program and language should encourage development of ad-on tools for future researchers. The goal will be to house the open-source program on GitHub or similar version control system. Users can fork, modify, test, and improve the base code. Users can submit new code for review, approval, and integration via GitHub. In the cases of developing custom interfaces for databases which deviate significantly from the Standard GTAP Data Base, such as CO2 and Supply chains, forks can be made of the base program and customized as required.
